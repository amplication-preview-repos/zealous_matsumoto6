/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Subscriber as PrismaSubscriber } from "@prisma/client";

export class SubscriberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubscriberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subscriber.count(args);
  }

  async subscribers<T extends Prisma.SubscriberFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriberFindManyArgs>
  ): Promise<PrismaSubscriber[]> {
    return this.prisma.subscriber.findMany<Prisma.SubscriberFindManyArgs>(args);
  }
  async subscriber<T extends Prisma.SubscriberFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriberFindUniqueArgs>
  ): Promise<PrismaSubscriber | null> {
    return this.prisma.subscriber.findUnique(args);
  }
  async createSubscriber<T extends Prisma.SubscriberCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriberCreateArgs>
  ): Promise<PrismaSubscriber> {
    return this.prisma.subscriber.create<T>(args);
  }
  async updateSubscriber<T extends Prisma.SubscriberUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriberUpdateArgs>
  ): Promise<PrismaSubscriber> {
    return this.prisma.subscriber.update<T>(args);
  }
  async deleteSubscriber<T extends Prisma.SubscriberDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriberDeleteArgs>
  ): Promise<PrismaSubscriber> {
    return this.prisma.subscriber.delete(args);
  }
}
